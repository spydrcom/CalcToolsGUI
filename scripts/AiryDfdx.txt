

//* Airy DE test using Df/Dx function


dx = 0.0001
INFINITY = 30
// !! Ialpha(alpha,x) = SIGMA [0<=m<=INFINITY] ( (x #/# 2)^(2*m+alpha) / (m! * GAMMA (m+alpha+1)) )
// !! Kalpha(alpha,x) = pi * ( Ialpha(-alpha,x) - Ialpha(alpha,x) ) / ( 2 * sin (pi*alpha) )

// simple Bessel function as f(x)
// !! Ip3(x) = Ialpha (1/3,x)
// !! In3(x) = Ialpha (-1/3,x)
// !! K3(x) = Kalpha (1/3,x)
// !! f(x) = Ip3(x)


configure BESSEL kind "I" alpha "-1/3" terms "20" description "Bessel function I (-1/3) in-line"
instance In3 BESSEL
// !! f(x) = In3(x)

configure BESSEL kind "I" alpha "1/3" terms "20" description "Bessel function I (1/3) in-line"
instance Ip3 BESSEL
// !! f(x) = Ip3(x)

configure BESSEL kind "K" alpha "1/3" terms "20" description "Bessel function K (1/3) in-line"
instance K3 BESSEL
// !! f(x) = K3(x)


!! Ai(x) = 1/pi * sqrt(x/3) * K3( 2/3 * sqrt(x^3) )
!! Bi(x) = sqrt(x/3) * ( Ip3( 2/3 * sqrt(x^3) ) + In3( 2/3 * sqrt(x^3) ) )


LIBRARY DFDX net.myorb.math.expressions.algorithms.ClMathDerivative

configure DFDX symbol "d" order "2" function "Ai" variable "x" run "dx" description "d2f/dx2"
instance Ai2 DFDX

!! errA(x) = abs ( Ai2() - x * Ai(x) )

configure DFDX symbol "d" order "2" function "Bi" variable "x" run "dx" description "d2f/dx2"
instance Bi2 DFDX

!! errB(x) = abs ( Bi2(x) - x * Bi(x) )

graph [-5<x<0<>0.01]  ( Ai(x), Bi(x) ) 
graph LIM 0.1 [-5<x<0<>0.01]  ( errA(x), errB(x) ) 

plotri Ai [-6 < x < -0.2 <> 0.1]
ENTITLED Airy Ai Function using Bessel identities

plotri Bi  [-6 < x < -0.2 <> 0.1]
ENTITLED Airy Bi Function using Bessel identities

