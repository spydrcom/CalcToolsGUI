

//* test the ClMathFraculus library (fractional calculus)

configure QUAD method "CTA" delta "0.01" description "custom quadrature using TRAP"
instance CTQuad QUAD

configure QUAD method "CCQ" description "custom quadrature using Clenshaw-Curtis"
instance CCQuad QUAD

configure QUAD method "TSQ" description "custom quadrature using TANH-SINH"
instance TSQuad QUAD

configure FRACULUS quad "TSQuad" delta "0.001"
configure FRACULUS method "Liouville" description "fractional calculus using Liouville algorithm"
configure FRACULUS order "-1/2"
instance HALFD2 FRACULUS
instance HALFD FRACULUS

// declare a derivative
!! F4(x) = x^4 / 4
!! FDV(u) = HALFD [0 <= s <= u] ( F4 ( s ) ) ; express FDV
!! FDV2(v) = HALFD2 [0 <= r <= v] ( FDV ( r ) ) ; express FDV2
calc FDV (2) ; calc FDV2 (2)


// declare a function
!! F(m) = 6 * m ; express F

// test half integral
configure FRACULUS order "1/2"
instance HALFI FRACULUS
instance HALFI2 FRACULUS

// first and second half integrals
!! FI(x) = HALFI [0 <= t <= x] ( F ( t ) ) ; express FI
!! FI2(y) = HALFI2 [0 <= u <= y] ( FI ( u ) ) ; express FI2
calc FI (2) ; calc FI2 (2) ; // these force integral generation

dk = 0.01
!! tst (x,p) = 1/GAMMA(p) * CCQuad [0 <= k <= x <> dk] ( (x - k)^(p-1) * F(k) * <*> k )
!! tst3 (x) = tst (x,3)
!! tst2 (x) = tst (x,2)

!! F2(x) = 3 * x^2
!! F3(x) = x^3

!! dif(v) = FI2(v) - F4(v)
!! dif3(v) = 1 + tst3(v) - F4(v)
!! dif2(v) = tst2(v) - F3(v)


// Liouville full test
!! D2(o) = F2(o) - FI2(o)
graph [0 < t < 5 <> 0.05] ( F2(t),  FI2(t), D2(t) )


// simple Cauchy
configure FRACULUS order "3/2"
instance HALFI3 FRACULUS
!! FI31(x) = HALFI3 [0 <= t <= x] ( F ( t ) ) ; express FI31
!! FI32(y) = HALFI3 [0 <= u <= y] ( FI31 ( u ) ) ; express FI32
!! D3(o) = F4(o) - FI32(o)
graph [0 < t < 5 <> 0.05] ( F4(t),  FI32(t), D3(t) )


// graph [0 < t < 5 <> 0.05] ( F4(t), tst3(t), dif3(t) )
//graph [0 < t < 5 <> 0.05] ( F4(t), FI(t), FI2(t), dif(t) )
// graph [0 < j < 5 <> 0.05] ( F3(j), tst2(j), dif2(j), F4(j), tst3(j), dif3(j) )
// graph [0 < t < 5 <> 0.05] ( FI(t), F2(t), F3(t), F4(t), FI2(t), dif(t) )


// Caputo test
configure FRACULUS method "Caputo" description "fractional calculus using Caputo algorithm"
configure FRACULUS order "1/2" delta "0.001"
instance HALFC FRACULUS

!! FC(x) = HALFC [-50 <= t <= x] ( F4 ( t ) ) ; express FC
!! FC2(x) = HALFC [-50 <= t <= x] ( FC ( t ) ) ; express FC2
// graph [0 < t < 5 <> 0.05] ( F3(t), F4(t), FC(t), FC2(t) )


// Hadamard test
configure FRACULUS method "Hadamard" description "fractional calculus using Hadamard algorithm"
configure FRACULUS order "1/2"
instance HALFH FRACULUS
instance HALFH2 FRACULUS

!! HS(w) = sin w ; express HS
!! FH(z) = HALFH [2*pi <= tu <= z] ( HS ( tu ) ) ; express FH
!! FH2(z) = HALFH2 [2*pi <= tv <= z] ( FH ( tv ) ) ; express FH2
!! difH(v) = FH2(v) - cos(v)
// graph [2*pi < t < 3*pi <> 0.05] ( sin(t), cos(t), FH(t), FH2(t), difH(t) )

